/**
 * govinfo-link-js
 * <p>The <strong>govinfo</strong> Link Service provides services for developers and webmasters to access content and metadata on <strong>govinfo</strong>. Current and planned services include a link service, list service, and search service. Please contact <a href=\"https://www.gpo.gov/askgpo/\">askGPO</a> for additional information about current or planned services.</p> <p>The link service is used to create embedded links to content and metadata on <strong>govinfo</strong> and is currently enabled for the collections below. The collection code is listed in parenthesis after each collection name, and the available queries are listed below each collection. More information about each query is provided on the individual collection page.</p>
 *
 * OpenAPI spec version: 0.5.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.

    define(['ApiClient'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.

    module.exports = factory(require('../ApiClient'))
  } else {
    // Browser globals (root is window)

    if (!root.govinfoLinkService) {
      root.govinfoLinkService = {
      }
    }
    root.govinfoLinkService.CongressionalDocuments = factory(root.govinfoLinkService.ApiClient)
  }
}(this, (ApiClient) => {
  /**
   * CongressionalDocumentsCDOC service.
   * @module api/CongressionalDocuments
   * @version 0.5.0
   */

  /**
   * Constructs a new CongressionalDocuments. 
   * 
   * @alias module:api/CongressionalDocuments
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  const exports = function (apiClient) {
    this.apiClient = apiClient || ApiClient.instance

    /**
     * Callback function to receive the result of the cdocFetchUsingGET operation.
     * @callback module:api/CongressionalDocuments~cdocFetchUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query: Congress, document type, document number.
     * 
     * @param {number} congress This is the numberical Congress number. Sample value is 112.
     * @param {module:model/String} doctype - This is the congressional document type. Congressional documents can either be house documents, senate documents, or treaty documents. Values are hdoc, sdoc, tdoc.
     * @param {number} docnum - This is the numerical document number. Congressional documents are numbered consecutively within a Congress for each document type. Sample value is 15. Note: Congressional documents that have been processed through the GPO collection are currently not available through the FDsys API.
     * @param {Object} opts - Optional parameters
     * @param {module:model/String} opts.linkType - This is the format of the returned document. Default is pdf. Other values are html, mods, premis, details, context.
     * @param {module:api/CongressionalDocuments~cdocFetchUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.cdocFetchUsingGET = function (congress, doctype, docnum, opts, callback) {
      opts = opts || {
      }
      const postBody = null

      // Verify the required parameter 'congress' is set

      if (congress === undefined || congress === null) {
        throw new Error("Missing the required parameter 'congress' when calling cdocFetchUsingGET")
      }

      // Verify the required parameter 'doctype' is set

      if (doctype === undefined || doctype === null) {
        throw new Error("Missing the required parameter 'doctype' when calling cdocFetchUsingGET")
      }

      // Verify the required parameter 'docnum' is set

      if (docnum === undefined || docnum === null) {
        throw new Error("Missing the required parameter 'docnum' when calling cdocFetchUsingGET")
      }

      const pathParams = {
        congress,
        doctype,
        docnum
      }
      const queryParams = {
        'link-type': opts.linkType
      }
      const collectionQueryParams = {
      }
      const headerParams = {
      }
      const formParams = {
      }

      const authNames = []
      const contentTypes = ['application/json']
      const accepts = ['*/*']
      const returnType = Object

      return this.apiClient.callApi(
        '/cdoc/{congress}/{doctype}/{docnum}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      )
    }

    /**
     * Callback function to receive the result of the cdocJacketFetchUsingGET operation.
     * @callback module:api/CongressionalDocuments~cdocJacketFetchUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query: Congress, jacket number.
     * 
     * @param {number} congress - This is the numberical Congress number. Sample value is 112.
     * @param {string} jacketid - This is the GPO jacket number. The jacket number is typically listed on the first page in the lower left corner. Jacket number is unique within a Congress. Sample value is 66-208.
     * @param {Object} opts - Optional parameters.
     * @param {module:model/String} opts.linkType - This is the format of the returned document. Default is pdf. Other values are html, mods, premis, details, context.
     * @param {module:api/CongressionalDocuments~cdocJacketFetchUsingGETCallback} callback The callback function, accepting three arguments: Error, data, response
     * data is of type: {@link Object}.
     */
    this.cdocJacketFetchUsingGET = function (congress, jacketid, opts, callback) {
      opts = opts || {
      }
      const postBody = null

      // Verify the required parameter 'congress' is set

      if (congress === undefined || congress === null) {
        throw new Error("Missing the required parameter 'congress' when calling cdocJacketFetchUsingGET")
      }

      // Verify the required parameter 'jacketid' is set

      if (jacketid === undefined || jacketid === null) {
        throw new Error("Missing the required parameter 'jacketid' when calling cdocJacketFetchUsingGET")
      }

      const pathParams = {
        congress,
        jacketid
      }
      const queryParams = {
        'link-type': opts.linkType
      }
      const collectionQueryParams = {
      }
      const headerParams = {
      }
      const formParams = {
      }

      const authNames = []
      const contentTypes = ['application/json']
      const accepts = ['*/*']
      const returnType = Object

      return this.apiClient.callApi(
        '/cdoc/{congress}/{jacketid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      )
    }
  }

  return exports
}))
